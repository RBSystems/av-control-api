// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.12.0
// source: driver.proto

package drivers

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities []string `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{1}
}

func (x *Capabilities) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type Power struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On bool `protobuf:"varint,1,opt,name=on,proto3" json:"on,omitempty"`
}

func (x *Power) Reset() {
	*x = Power{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Power) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Power) ProtoMessage() {}

func (x *Power) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Power.ProtoReflect.Descriptor instead.
func (*Power) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{2}
}

func (x *Power) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

type SetPowerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info  *DeviceInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Power *Power      `protobuf:"bytes,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (x *SetPowerRequest) Reset() {
	*x = SetPowerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPowerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPowerRequest) ProtoMessage() {}

func (x *SetPowerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPowerRequest.ProtoReflect.Descriptor instead.
func (*SetPowerRequest) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{3}
}

func (x *SetPowerRequest) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SetPowerRequest) GetPower() *Power {
	if x != nil {
		return x.Power
	}
	return nil
}

type Inputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs map[string]string `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Inputs) Reset() {
	*x = Inputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inputs) ProtoMessage() {}

func (x *Inputs) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inputs.ProtoReflect.Descriptor instead.
func (*Inputs) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{4}
}

func (x *Inputs) GetInputs() map[string]string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type SetInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info   *DeviceInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Output string      `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Input  string      `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *SetInputRequest) Reset() {
	*x = SetInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInputRequest) ProtoMessage() {}

func (x *SetInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInputRequest.ProtoReflect.Descriptor instead.
func (*SetInputRequest) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{5}
}

func (x *SetInputRequest) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SetInputRequest) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *SetInputRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type Blank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blanked bool `protobuf:"varint,1,opt,name=blanked,proto3" json:"blanked,omitempty"`
}

func (x *Blank) Reset() {
	*x = Blank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blank) ProtoMessage() {}

func (x *Blank) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blank.ProtoReflect.Descriptor instead.
func (*Blank) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{6}
}

func (x *Blank) GetBlanked() bool {
	if x != nil {
		return x.Blanked
	}
	return false
}

type SetBlankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info  *DeviceInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Blank *Blank      `protobuf:"bytes,2,opt,name=blank,proto3" json:"blank,omitempty"`
}

func (x *SetBlankRequest) Reset() {
	*x = SetBlankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBlankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBlankRequest) ProtoMessage() {}

func (x *SetBlankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBlankRequest.ProtoReflect.Descriptor instead.
func (*SetBlankRequest) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{7}
}

func (x *SetBlankRequest) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SetBlankRequest) GetBlank() *Blank {
	if x != nil {
		return x.Blank
	}
	return nil
}

type GetAudioInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info   *DeviceInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Blocks []string    `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *GetAudioInfo) Reset() {
	*x = GetAudioInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAudioInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAudioInfo) ProtoMessage() {}

func (x *GetAudioInfo) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAudioInfo.ProtoReflect.Descriptor instead.
func (*GetAudioInfo) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{8}
}

func (x *GetAudioInfo) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetAudioInfo) GetBlocks() []string {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type Volumes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volumes map[string]int32 `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
}

func (x *Volumes) Reset() {
	*x = Volumes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volumes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volumes) ProtoMessage() {}

func (x *Volumes) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volumes.ProtoReflect.Descriptor instead.
func (*Volumes) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{9}
}

func (x *Volumes) GetVolumes() map[string]int32 {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type SetVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info  *DeviceInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Block string      `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	Level int32       `protobuf:"zigzag32,3,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *SetVolumeRequest) Reset() {
	*x = SetVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVolumeRequest) ProtoMessage() {}

func (x *SetVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVolumeRequest.ProtoReflect.Descriptor instead.
func (*SetVolumeRequest) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{10}
}

func (x *SetVolumeRequest) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SetVolumeRequest) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *SetVolumeRequest) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type Mutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mutes map[string]bool `protobuf:"bytes,1,rep,name=mutes,proto3" json:"mutes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Mutes) Reset() {
	*x = Mutes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mutes) ProtoMessage() {}

func (x *Mutes) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mutes.ProtoReflect.Descriptor instead.
func (*Mutes) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{11}
}

func (x *Mutes) GetMutes() map[string]bool {
	if x != nil {
		return x.Mutes
	}
	return nil
}

type SetMuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info  *DeviceInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Block string      `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	Muted bool        `protobuf:"varint,3,opt,name=muted,proto3" json:"muted,omitempty"`
}

func (x *SetMuteRequest) Reset() {
	*x = SetMuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMuteRequest) ProtoMessage() {}

func (x *SetMuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMuteRequest.ProtoReflect.Descriptor instead.
func (*SetMuteRequest) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{12}
}

func (x *SetMuteRequest) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SetMuteRequest) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *SetMuteRequest) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

var File_driver_proto protoreflect.FileDescriptor

var file_driver_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x32, 0x0a, 0x0c,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x17, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x06, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x68, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x21, 0x0a, 0x05, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x61, 0x6e,
	0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x22, 0x60, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x0a, 0x05, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x52, 0x05, 0x62,
	0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x4f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x7e, 0x0a, 0x07, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x72,
	0x0a, 0x05, 0x4d, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x4d, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x4d, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x65, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x32, 0xa4, 0x07, 0x0a, 0x06, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x15, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x13, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x0f, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x18, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0f,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x18, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x13, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x0f, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x31, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x12, 0x13, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x0e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x6c, 0x61, 0x6e, 0x6b,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x12, 0x18,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x37, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x12, 0x15, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x53,
	0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x19, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x0e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x3c, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x17, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_driver_proto_rawDescOnce sync.Once
	file_driver_proto_rawDescData = file_driver_proto_rawDesc
)

func file_driver_proto_rawDescGZIP() []byte {
	file_driver_proto_rawDescOnce.Do(func() {
		file_driver_proto_rawDescData = protoimpl.X.CompressGZIP(file_driver_proto_rawDescData)
	})
	return file_driver_proto_rawDescData
}

var file_driver_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_driver_proto_goTypes = []interface{}{
	(*DeviceInfo)(nil),       // 0: drivers.DeviceInfo
	(*Capabilities)(nil),     // 1: drivers.Capabilities
	(*Power)(nil),            // 2: drivers.Power
	(*SetPowerRequest)(nil),  // 3: drivers.SetPowerRequest
	(*Inputs)(nil),           // 4: drivers.Inputs
	(*SetInputRequest)(nil),  // 5: drivers.SetInputRequest
	(*Blank)(nil),            // 6: drivers.Blank
	(*SetBlankRequest)(nil),  // 7: drivers.SetBlankRequest
	(*GetAudioInfo)(nil),     // 8: drivers.GetAudioInfo
	(*Volumes)(nil),          // 9: drivers.Volumes
	(*SetVolumeRequest)(nil), // 10: drivers.SetVolumeRequest
	(*Mutes)(nil),            // 11: drivers.Mutes
	(*SetMuteRequest)(nil),   // 12: drivers.SetMuteRequest
	nil,                      // 13: drivers.Inputs.InputsEntry
	nil,                      // 14: drivers.Volumes.VolumesEntry
	nil,                      // 15: drivers.Mutes.MutesEntry
	(*empty.Empty)(nil),      // 16: google.protobuf.Empty
}
var file_driver_proto_depIdxs = []int32{
	0,  // 0: drivers.SetPowerRequest.info:type_name -> drivers.DeviceInfo
	2,  // 1: drivers.SetPowerRequest.power:type_name -> drivers.Power
	13, // 2: drivers.Inputs.inputs:type_name -> drivers.Inputs.InputsEntry
	0,  // 3: drivers.SetInputRequest.info:type_name -> drivers.DeviceInfo
	0,  // 4: drivers.SetBlankRequest.info:type_name -> drivers.DeviceInfo
	6,  // 5: drivers.SetBlankRequest.blank:type_name -> drivers.Blank
	0,  // 6: drivers.GetAudioInfo.info:type_name -> drivers.DeviceInfo
	14, // 7: drivers.Volumes.volumes:type_name -> drivers.Volumes.VolumesEntry
	0,  // 8: drivers.SetVolumeRequest.info:type_name -> drivers.DeviceInfo
	15, // 9: drivers.Mutes.mutes:type_name -> drivers.Mutes.MutesEntry
	0,  // 10: drivers.SetMuteRequest.info:type_name -> drivers.DeviceInfo
	0,  // 11: drivers.Driver.GetCapabilities:input_type -> drivers.DeviceInfo
	0,  // 12: drivers.Driver.GetPower:input_type -> drivers.DeviceInfo
	3,  // 13: drivers.Driver.SetPower:input_type -> drivers.SetPowerRequest
	0,  // 14: drivers.Driver.GetAudioInputs:input_type -> drivers.DeviceInfo
	5,  // 15: drivers.Driver.SetAudioInput:input_type -> drivers.SetInputRequest
	0,  // 16: drivers.Driver.GetVideoInputs:input_type -> drivers.DeviceInfo
	5,  // 17: drivers.Driver.SetVideoInput:input_type -> drivers.SetInputRequest
	0,  // 18: drivers.Driver.GetAudioVideoInputs:input_type -> drivers.DeviceInfo
	5,  // 19: drivers.Driver.SetAudioVideoInput:input_type -> drivers.SetInputRequest
	0,  // 20: drivers.Driver.GetBlank:input_type -> drivers.DeviceInfo
	7,  // 21: drivers.Driver.SetBlank:input_type -> drivers.SetBlankRequest
	8,  // 22: drivers.Driver.GetVolumes:input_type -> drivers.GetAudioInfo
	10, // 23: drivers.Driver.SetVolume:input_type -> drivers.SetVolumeRequest
	8,  // 24: drivers.Driver.GetMutes:input_type -> drivers.GetAudioInfo
	12, // 25: drivers.Driver.SetMute:input_type -> drivers.SetMuteRequest
	1,  // 26: drivers.Driver.GetCapabilities:output_type -> drivers.Capabilities
	2,  // 27: drivers.Driver.GetPower:output_type -> drivers.Power
	16, // 28: drivers.Driver.SetPower:output_type -> google.protobuf.Empty
	4,  // 29: drivers.Driver.GetAudioInputs:output_type -> drivers.Inputs
	16, // 30: drivers.Driver.SetAudioInput:output_type -> google.protobuf.Empty
	4,  // 31: drivers.Driver.GetVideoInputs:output_type -> drivers.Inputs
	16, // 32: drivers.Driver.SetVideoInput:output_type -> google.protobuf.Empty
	4,  // 33: drivers.Driver.GetAudioVideoInputs:output_type -> drivers.Inputs
	16, // 34: drivers.Driver.SetAudioVideoInput:output_type -> google.protobuf.Empty
	6,  // 35: drivers.Driver.GetBlank:output_type -> drivers.Blank
	16, // 36: drivers.Driver.SetBlank:output_type -> google.protobuf.Empty
	9,  // 37: drivers.Driver.GetVolumes:output_type -> drivers.Volumes
	16, // 38: drivers.Driver.SetVolume:output_type -> google.protobuf.Empty
	11, // 39: drivers.Driver.GetMutes:output_type -> drivers.Mutes
	16, // 40: drivers.Driver.SetMute:output_type -> google.protobuf.Empty
	26, // [26:41] is the sub-list for method output_type
	11, // [11:26] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_driver_proto_init() }
func file_driver_proto_init() {
	if File_driver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_driver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Power); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPowerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBlankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAudioInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volumes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mutes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_driver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_driver_proto_goTypes,
		DependencyIndexes: file_driver_proto_depIdxs,
		MessageInfos:      file_driver_proto_msgTypes,
	}.Build()
	File_driver_proto = out.File
	file_driver_proto_rawDesc = nil
	file_driver_proto_goTypes = nil
	file_driver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DriverClient is the client API for Driver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DriverClient interface {
	GetCapabilities(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Capabilities, error)
	GetPower(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Power, error)
	SetPower(ctx context.Context, in *SetPowerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAudioInputs(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Inputs, error)
	SetAudioInput(ctx context.Context, in *SetInputRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetVideoInputs(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Inputs, error)
	SetVideoInput(ctx context.Context, in *SetInputRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAudioVideoInputs(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Inputs, error)
	SetAudioVideoInput(ctx context.Context, in *SetInputRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetBlank(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Blank, error)
	SetBlank(ctx context.Context, in *SetBlankRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetVolumes(ctx context.Context, in *GetAudioInfo, opts ...grpc.CallOption) (*Volumes, error)
	SetVolume(ctx context.Context, in *SetVolumeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetMutes(ctx context.Context, in *GetAudioInfo, opts ...grpc.CallOption) (*Mutes, error)
	SetMute(ctx context.Context, in *SetMuteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type driverClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverClient(cc grpc.ClientConnInterface) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) GetCapabilities(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Capabilities, error) {
	out := new(Capabilities)
	err := c.cc.Invoke(ctx, "/drivers.Driver/GetCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetPower(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Power, error) {
	out := new(Power)
	err := c.cc.Invoke(ctx, "/drivers.Driver/GetPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) SetPower(ctx context.Context, in *SetPowerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/drivers.Driver/SetPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetAudioInputs(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Inputs, error) {
	out := new(Inputs)
	err := c.cc.Invoke(ctx, "/drivers.Driver/GetAudioInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) SetAudioInput(ctx context.Context, in *SetInputRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/drivers.Driver/SetAudioInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetVideoInputs(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Inputs, error) {
	out := new(Inputs)
	err := c.cc.Invoke(ctx, "/drivers.Driver/GetVideoInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) SetVideoInput(ctx context.Context, in *SetInputRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/drivers.Driver/SetVideoInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetAudioVideoInputs(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Inputs, error) {
	out := new(Inputs)
	err := c.cc.Invoke(ctx, "/drivers.Driver/GetAudioVideoInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) SetAudioVideoInput(ctx context.Context, in *SetInputRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/drivers.Driver/SetAudioVideoInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetBlank(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Blank, error) {
	out := new(Blank)
	err := c.cc.Invoke(ctx, "/drivers.Driver/GetBlank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) SetBlank(ctx context.Context, in *SetBlankRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/drivers.Driver/SetBlank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetVolumes(ctx context.Context, in *GetAudioInfo, opts ...grpc.CallOption) (*Volumes, error) {
	out := new(Volumes)
	err := c.cc.Invoke(ctx, "/drivers.Driver/GetVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) SetVolume(ctx context.Context, in *SetVolumeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/drivers.Driver/SetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetMutes(ctx context.Context, in *GetAudioInfo, opts ...grpc.CallOption) (*Mutes, error) {
	out := new(Mutes)
	err := c.cc.Invoke(ctx, "/drivers.Driver/GetMutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) SetMute(ctx context.Context, in *SetMuteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/drivers.Driver/SetMute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServer is the server API for Driver service.
type DriverServer interface {
	GetCapabilities(context.Context, *DeviceInfo) (*Capabilities, error)
	GetPower(context.Context, *DeviceInfo) (*Power, error)
	SetPower(context.Context, *SetPowerRequest) (*empty.Empty, error)
	GetAudioInputs(context.Context, *DeviceInfo) (*Inputs, error)
	SetAudioInput(context.Context, *SetInputRequest) (*empty.Empty, error)
	GetVideoInputs(context.Context, *DeviceInfo) (*Inputs, error)
	SetVideoInput(context.Context, *SetInputRequest) (*empty.Empty, error)
	GetAudioVideoInputs(context.Context, *DeviceInfo) (*Inputs, error)
	SetAudioVideoInput(context.Context, *SetInputRequest) (*empty.Empty, error)
	GetBlank(context.Context, *DeviceInfo) (*Blank, error)
	SetBlank(context.Context, *SetBlankRequest) (*empty.Empty, error)
	GetVolumes(context.Context, *GetAudioInfo) (*Volumes, error)
	SetVolume(context.Context, *SetVolumeRequest) (*empty.Empty, error)
	GetMutes(context.Context, *GetAudioInfo) (*Mutes, error)
	SetMute(context.Context, *SetMuteRequest) (*empty.Empty, error)
}

// UnimplementedDriverServer can be embedded to have forward compatible implementations.
type UnimplementedDriverServer struct {
}

func (*UnimplementedDriverServer) GetCapabilities(context.Context, *DeviceInfo) (*Capabilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapabilities not implemented")
}
func (*UnimplementedDriverServer) GetPower(context.Context, *DeviceInfo) (*Power, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPower not implemented")
}
func (*UnimplementedDriverServer) SetPower(context.Context, *SetPowerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPower not implemented")
}
func (*UnimplementedDriverServer) GetAudioInputs(context.Context, *DeviceInfo) (*Inputs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudioInputs not implemented")
}
func (*UnimplementedDriverServer) SetAudioInput(context.Context, *SetInputRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAudioInput not implemented")
}
func (*UnimplementedDriverServer) GetVideoInputs(context.Context, *DeviceInfo) (*Inputs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInputs not implemented")
}
func (*UnimplementedDriverServer) SetVideoInput(context.Context, *SetInputRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVideoInput not implemented")
}
func (*UnimplementedDriverServer) GetAudioVideoInputs(context.Context, *DeviceInfo) (*Inputs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudioVideoInputs not implemented")
}
func (*UnimplementedDriverServer) SetAudioVideoInput(context.Context, *SetInputRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAudioVideoInput not implemented")
}
func (*UnimplementedDriverServer) GetBlank(context.Context, *DeviceInfo) (*Blank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlank not implemented")
}
func (*UnimplementedDriverServer) SetBlank(context.Context, *SetBlankRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBlank not implemented")
}
func (*UnimplementedDriverServer) GetVolumes(context.Context, *GetAudioInfo) (*Volumes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolumes not implemented")
}
func (*UnimplementedDriverServer) SetVolume(context.Context, *SetVolumeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVolume not implemented")
}
func (*UnimplementedDriverServer) GetMutes(context.Context, *GetAudioInfo) (*Mutes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMutes not implemented")
}
func (*UnimplementedDriverServer) SetMute(context.Context, *SetMuteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMute not implemented")
}

func RegisterDriverServer(s *grpc.Server, srv DriverServer) {
	s.RegisterService(&_Driver_serviceDesc, srv)
}

func _Driver_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/GetCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetCapabilities(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/GetPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetPower(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_SetPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SetPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/SetPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SetPower(ctx, req.(*SetPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetAudioInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetAudioInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/GetAudioInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetAudioInputs(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_SetAudioInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SetAudioInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/SetAudioInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SetAudioInput(ctx, req.(*SetInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetVideoInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetVideoInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/GetVideoInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetVideoInputs(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_SetVideoInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SetVideoInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/SetVideoInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SetVideoInput(ctx, req.(*SetInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetAudioVideoInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetAudioVideoInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/GetAudioVideoInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetAudioVideoInputs(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_SetAudioVideoInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SetAudioVideoInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/SetAudioVideoInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SetAudioVideoInput(ctx, req.(*SetInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetBlank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetBlank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/GetBlank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetBlank(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_SetBlank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBlankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SetBlank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/SetBlank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SetBlank(ctx, req.(*SetBlankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudioInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/GetVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetVolumes(ctx, req.(*GetAudioInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_SetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/SetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SetVolume(ctx, req.(*SetVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetMutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudioInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetMutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/GetMutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetMutes(ctx, req.(*GetAudioInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_SetMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SetMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivers.Driver/SetMute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SetMute(ctx, req.(*SetMuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Driver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drivers.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCapabilities",
			Handler:    _Driver_GetCapabilities_Handler,
		},
		{
			MethodName: "GetPower",
			Handler:    _Driver_GetPower_Handler,
		},
		{
			MethodName: "SetPower",
			Handler:    _Driver_SetPower_Handler,
		},
		{
			MethodName: "GetAudioInputs",
			Handler:    _Driver_GetAudioInputs_Handler,
		},
		{
			MethodName: "SetAudioInput",
			Handler:    _Driver_SetAudioInput_Handler,
		},
		{
			MethodName: "GetVideoInputs",
			Handler:    _Driver_GetVideoInputs_Handler,
		},
		{
			MethodName: "SetVideoInput",
			Handler:    _Driver_SetVideoInput_Handler,
		},
		{
			MethodName: "GetAudioVideoInputs",
			Handler:    _Driver_GetAudioVideoInputs_Handler,
		},
		{
			MethodName: "SetAudioVideoInput",
			Handler:    _Driver_SetAudioVideoInput_Handler,
		},
		{
			MethodName: "GetBlank",
			Handler:    _Driver_GetBlank_Handler,
		},
		{
			MethodName: "SetBlank",
			Handler:    _Driver_SetBlank_Handler,
		},
		{
			MethodName: "GetVolumes",
			Handler:    _Driver_GetVolumes_Handler,
		},
		{
			MethodName: "SetVolume",
			Handler:    _Driver_SetVolume_Handler,
		},
		{
			MethodName: "GetMutes",
			Handler:    _Driver_GetMutes_Handler,
		},
		{
			MethodName: "SetMute",
			Handler:    _Driver_SetMute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver.proto",
}
